apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "incidentbot-console.fullname" . }}
  labels:
    {{- include "incidentbot-console.labels" . | nindent 4 }}
  {{- with .Values.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "incidentbot-console.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "incidentbot-console.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "incidentbot-console.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ required "A valid .Values.image.repository value is required." .Values.image.repository }}:{{ required "A valid .Values.image.tag value is required." .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.envVars }}
          env:
          {{- include "incidentbot-console.envVars.rendered" (list . .Values) | indent 12 }}
          {{- end }}
          {{- if and .Values.envFromSecret.enabled (not (empty .Values.envFromSecret.secretName)) }}
          envFrom:
            - secretRef:
                name: {{ .Values.envFromSecret.secretName }}
          {{- end }}
          {{- if .Values.healthCheck.enabled }}
          {{- with .Values.healthCheck }}
          livenessProbe:
            httpGet:
              path: {{ .path }}
              port: {{ $.Values.service.port }}
              scheme: {{ .scheme | default "HTTP" }}
            initialDelaySeconds: {{ .initialDelaySeconds | default 30 }}
            periodSeconds: {{ .periodSeconds | default 30 }}
            timeoutSeconds: {{ .timeoutSeconds | default 1 }}
          readinessProbe:
            httpGet:
              path: {{ .path }}
              port: {{ $.Values.service.port }}
              scheme: {{ .scheme | default "HTTP" }}
            initialDelaySeconds: {{ .initialDelaySeconds | default 30 }}
            periodSeconds: {{ .periodSeconds | default 30 }}
            timeoutSeconds: {{ .timeoutSeconds | default 1 }}
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
